// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef PROTOBUF_Chat_2eproto__INCLUDED
#define PROTOBUF_Chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GameEngine {
namespace Common {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Chat_2eproto();
void protobuf_AssignDesc_Chat_2eproto();
void protobuf_ShutdownFile_Chat_2eproto();

class ClientIdentity;
class SetDestination;

// ===================================================================

class ClientIdentity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameEngine.Common.ClientIdentity) */ {
 public:
  ClientIdentity();
  virtual ~ClientIdentity();

  ClientIdentity(const ClientIdentity& from);

  inline ClientIdentity& operator=(const ClientIdentity& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientIdentity& default_instance();

  void Swap(ClientIdentity* other);

  // implements Message ----------------------------------------------

  inline ClientIdentity* New() const { return New(NULL); }

  ClientIdentity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientIdentity& from);
  void MergeFrom(const ClientIdentity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIdentity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string identity = 1;
  void clear_identity();
  static const int kIdentityFieldNumber = 1;
  const ::std::string& identity() const;
  void set_identity(const ::std::string& value);
  void set_identity(const char* value);
  void set_identity(const char* value, size_t size);
  ::std::string* mutable_identity();
  ::std::string* release_identity();
  void set_allocated_identity(::std::string* identity);

  // @@protoc_insertion_point(class_scope:GameEngine.Common.ClientIdentity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr identity_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static ClientIdentity* default_instance_;
};
// -------------------------------------------------------------------

class SetDestination : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameEngine.Common.SetDestination) */ {
 public:
  SetDestination();
  virtual ~SetDestination();

  SetDestination(const SetDestination& from);

  inline SetDestination& operator=(const SetDestination& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetDestination& default_instance();

  void Swap(SetDestination* other);

  // implements Message ----------------------------------------------

  inline SetDestination* New() const { return New(NULL); }

  SetDestination* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetDestination& from);
  void MergeFrom(const SetDestination& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetDestination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GameEngine.Common.ClientIdentity clientIdentity = 1;
  bool has_clientidentity() const;
  void clear_clientidentity();
  static const int kClientIdentityFieldNumber = 1;
  const ::GameEngine::Common::ClientIdentity& clientidentity() const;
  ::GameEngine::Common::ClientIdentity* mutable_clientidentity();
  ::GameEngine::Common::ClientIdentity* release_clientidentity();
  void set_allocated_clientidentity(::GameEngine::Common::ClientIdentity* clientidentity);

  // @@protoc_insertion_point(class_scope:GameEngine.Common.SetDestination)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::GameEngine::Common::ClientIdentity* clientidentity_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static SetDestination* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientIdentity

// optional string identity = 1;
inline void ClientIdentity::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientIdentity::identity() const {
  // @@protoc_insertion_point(field_get:GameEngine.Common.ClientIdentity.identity)
  return identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientIdentity::set_identity(const ::std::string& value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameEngine.Common.ClientIdentity.identity)
}
inline void ClientIdentity::set_identity(const char* value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameEngine.Common.ClientIdentity.identity)
}
inline void ClientIdentity::set_identity(const char* value, size_t size) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameEngine.Common.ClientIdentity.identity)
}
inline ::std::string* ClientIdentity::mutable_identity() {
  
  // @@protoc_insertion_point(field_mutable:GameEngine.Common.ClientIdentity.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientIdentity::release_identity() {
  // @@protoc_insertion_point(field_release:GameEngine.Common.ClientIdentity.identity)
  
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientIdentity::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    
  } else {
    
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:GameEngine.Common.ClientIdentity.identity)
}

// -------------------------------------------------------------------

// SetDestination

// optional .GameEngine.Common.ClientIdentity clientIdentity = 1;
inline bool SetDestination::has_clientidentity() const {
  return !_is_default_instance_ && clientidentity_ != NULL;
}
inline void SetDestination::clear_clientidentity() {
  if (GetArenaNoVirtual() == NULL && clientidentity_ != NULL) delete clientidentity_;
  clientidentity_ = NULL;
}
inline const ::GameEngine::Common::ClientIdentity& SetDestination::clientidentity() const {
  // @@protoc_insertion_point(field_get:GameEngine.Common.SetDestination.clientIdentity)
  return clientidentity_ != NULL ? *clientidentity_ : *default_instance_->clientidentity_;
}
inline ::GameEngine::Common::ClientIdentity* SetDestination::mutable_clientidentity() {
  
  if (clientidentity_ == NULL) {
    clientidentity_ = new ::GameEngine::Common::ClientIdentity;
  }
  // @@protoc_insertion_point(field_mutable:GameEngine.Common.SetDestination.clientIdentity)
  return clientidentity_;
}
inline ::GameEngine::Common::ClientIdentity* SetDestination::release_clientidentity() {
  // @@protoc_insertion_point(field_release:GameEngine.Common.SetDestination.clientIdentity)
  
  ::GameEngine::Common::ClientIdentity* temp = clientidentity_;
  clientidentity_ = NULL;
  return temp;
}
inline void SetDestination::set_allocated_clientidentity(::GameEngine::Common::ClientIdentity* clientidentity) {
  delete clientidentity_;
  clientidentity_ = clientidentity;
  if (clientidentity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameEngine.Common.SetDestination.clientIdentity)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace GameEngine

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Chat_2eproto__INCLUDED
