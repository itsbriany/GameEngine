// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GameEngine {
namespace Common {

namespace {

const ::google::protobuf::Descriptor* ClientIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDestination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDestination_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Chat_2eproto() {
  protobuf_AddDesc_Chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Chat.proto");
  GOOGLE_CHECK(file != NULL);
  ClientIdentity_descriptor_ = file->message_type(0);
  static const int ClientIdentity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIdentity, identity_),
  };
  ClientIdentity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientIdentity_descriptor_,
      ClientIdentity::default_instance_,
      ClientIdentity_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientIdentity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIdentity, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIdentity, _is_default_instance_));
  SetDestination_descriptor_ = file->message_type(1);
  static const int SetDestination_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDestination, clientidentity_),
  };
  SetDestination_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetDestination_descriptor_,
      SetDestination::default_instance_,
      SetDestination_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetDestination),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDestination, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDestination, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientIdentity_descriptor_, &ClientIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetDestination_descriptor_, &SetDestination::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Chat_2eproto() {
  delete ClientIdentity::default_instance_;
  delete ClientIdentity_reflection_;
  delete SetDestination::default_instance_;
  delete SetDestination_reflection_;
}

void protobuf_AddDesc_Chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nChat.proto\022\021GameEngine.Common\"\"\n\016Clien"
    "tIdentity\022\020\n\010identity\030\001 \001(\t\"K\n\016SetDestin"
    "ation\0229\n\016clientIdentity\030\001 \001(\0132!.GameEngi"
    "ne.Common.ClientIdentityb\006proto3", 152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Chat.proto", &protobuf_RegisterTypes);
  ClientIdentity::default_instance_ = new ClientIdentity();
  SetDestination::default_instance_ = new SetDestination();
  ClientIdentity::default_instance_->InitAsDefaultInstance();
  SetDestination::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Chat_2eproto {
  StaticDescriptorInitializer_Chat_2eproto() {
    protobuf_AddDesc_Chat_2eproto();
  }
} static_descriptor_initializer_Chat_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientIdentity::kIdentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientIdentity::ClientIdentity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEngine.Common.ClientIdentity)
}

void ClientIdentity::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClientIdentity::ClientIdentity(const ClientIdentity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameEngine.Common.ClientIdentity)
}

void ClientIdentity::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClientIdentity::~ClientIdentity() {
  // @@protoc_insertion_point(destructor:GameEngine.Common.ClientIdentity)
  SharedDtor();
}

void ClientIdentity::SharedDtor() {
  identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ClientIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientIdentity_descriptor_;
}

const ClientIdentity& ClientIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

ClientIdentity* ClientIdentity::default_instance_ = NULL;

ClientIdentity* ClientIdentity::New(::google::protobuf::Arena* arena) const {
  ClientIdentity* n = new ClientIdentity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEngine.Common.ClientIdentity)
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClientIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEngine.Common.ClientIdentity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string identity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identity().data(), this->identity().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameEngine.Common.ClientIdentity.identity"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEngine.Common.ClientIdentity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEngine.Common.ClientIdentity)
  return false;
#undef DO_
}

void ClientIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEngine.Common.ClientIdentity)
  // optional string identity = 1;
  if (this->identity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameEngine.Common.ClientIdentity.identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identity(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameEngine.Common.ClientIdentity)
}

::google::protobuf::uint8* ClientIdentity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEngine.Common.ClientIdentity)
  // optional string identity = 1;
  if (this->identity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameEngine.Common.ClientIdentity.identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameEngine.Common.ClientIdentity)
  return target;
}

int ClientIdentity::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameEngine.Common.ClientIdentity)
  int total_size = 0;

  // optional string identity = 1;
  if (this->identity().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identity());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientIdentity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEngine.Common.ClientIdentity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClientIdentity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientIdentity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEngine.Common.ClientIdentity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEngine.Common.ClientIdentity)
    MergeFrom(*source);
  }
}

void ClientIdentity::MergeFrom(const ClientIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEngine.Common.ClientIdentity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.identity().size() > 0) {

    identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_);
  }
}

void ClientIdentity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEngine.Common.ClientIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientIdentity::CopyFrom(const ClientIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEngine.Common.ClientIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIdentity::IsInitialized() const {

  return true;
}

void ClientIdentity::Swap(ClientIdentity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientIdentity::InternalSwap(ClientIdentity* other) {
  identity_.Swap(&other->identity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientIdentity_descriptor_;
  metadata.reflection = ClientIdentity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientIdentity

// optional string identity = 1;
void ClientIdentity::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClientIdentity::identity() const {
  // @@protoc_insertion_point(field_get:GameEngine.Common.ClientIdentity.identity)
  return identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientIdentity::set_identity(const ::std::string& value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameEngine.Common.ClientIdentity.identity)
}
 void ClientIdentity::set_identity(const char* value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameEngine.Common.ClientIdentity.identity)
}
 void ClientIdentity::set_identity(const char* value, size_t size) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameEngine.Common.ClientIdentity.identity)
}
 ::std::string* ClientIdentity::mutable_identity() {
  
  // @@protoc_insertion_point(field_mutable:GameEngine.Common.ClientIdentity.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientIdentity::release_identity() {
  // @@protoc_insertion_point(field_release:GameEngine.Common.ClientIdentity.identity)
  
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientIdentity::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    
  } else {
    
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:GameEngine.Common.ClientIdentity.identity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetDestination::kClientIdentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetDestination::SetDestination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEngine.Common.SetDestination)
}

void SetDestination::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  clientidentity_ = const_cast< ::GameEngine::Common::ClientIdentity*>(&::GameEngine::Common::ClientIdentity::default_instance());
}

SetDestination::SetDestination(const SetDestination& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameEngine.Common.SetDestination)
}

void SetDestination::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clientidentity_ = NULL;
}

SetDestination::~SetDestination() {
  // @@protoc_insertion_point(destructor:GameEngine.Common.SetDestination)
  SharedDtor();
}

void SetDestination::SharedDtor() {
  if (this != default_instance_) {
    delete clientidentity_;
  }
}

void SetDestination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDestination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDestination_descriptor_;
}

const SetDestination& SetDestination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

SetDestination* SetDestination::default_instance_ = NULL;

SetDestination* SetDestination::New(::google::protobuf::Arena* arena) const {
  SetDestination* n = new SetDestination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetDestination::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEngine.Common.SetDestination)
  if (GetArenaNoVirtual() == NULL && clientidentity_ != NULL) delete clientidentity_;
  clientidentity_ = NULL;
}

bool SetDestination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEngine.Common.SetDestination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameEngine.Common.ClientIdentity clientIdentity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientidentity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEngine.Common.SetDestination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEngine.Common.SetDestination)
  return false;
#undef DO_
}

void SetDestination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEngine.Common.SetDestination)
  // optional .GameEngine.Common.ClientIdentity clientIdentity = 1;
  if (this->has_clientidentity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->clientidentity_, output);
  }

  // @@protoc_insertion_point(serialize_end:GameEngine.Common.SetDestination)
}

::google::protobuf::uint8* SetDestination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEngine.Common.SetDestination)
  // optional .GameEngine.Common.ClientIdentity clientIdentity = 1;
  if (this->has_clientidentity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->clientidentity_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameEngine.Common.SetDestination)
  return target;
}

int SetDestination::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameEngine.Common.SetDestination)
  int total_size = 0;

  // optional .GameEngine.Common.ClientIdentity clientIdentity = 1;
  if (this->has_clientidentity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clientidentity_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDestination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameEngine.Common.SetDestination)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetDestination* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetDestination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameEngine.Common.SetDestination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameEngine.Common.SetDestination)
    MergeFrom(*source);
  }
}

void SetDestination::MergeFrom(const SetDestination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameEngine.Common.SetDestination)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_clientidentity()) {
    mutable_clientidentity()->::GameEngine::Common::ClientIdentity::MergeFrom(from.clientidentity());
  }
}

void SetDestination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameEngine.Common.SetDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDestination::CopyFrom(const SetDestination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEngine.Common.SetDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDestination::IsInitialized() const {

  return true;
}

void SetDestination::Swap(SetDestination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetDestination::InternalSwap(SetDestination* other) {
  std::swap(clientidentity_, other->clientidentity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetDestination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDestination_descriptor_;
  metadata.reflection = SetDestination_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetDestination

// optional .GameEngine.Common.ClientIdentity clientIdentity = 1;
bool SetDestination::has_clientidentity() const {
  return !_is_default_instance_ && clientidentity_ != NULL;
}
void SetDestination::clear_clientidentity() {
  if (GetArenaNoVirtual() == NULL && clientidentity_ != NULL) delete clientidentity_;
  clientidentity_ = NULL;
}
const ::GameEngine::Common::ClientIdentity& SetDestination::clientidentity() const {
  // @@protoc_insertion_point(field_get:GameEngine.Common.SetDestination.clientIdentity)
  return clientidentity_ != NULL ? *clientidentity_ : *default_instance_->clientidentity_;
}
::GameEngine::Common::ClientIdentity* SetDestination::mutable_clientidentity() {
  
  if (clientidentity_ == NULL) {
    clientidentity_ = new ::GameEngine::Common::ClientIdentity;
  }
  // @@protoc_insertion_point(field_mutable:GameEngine.Common.SetDestination.clientIdentity)
  return clientidentity_;
}
::GameEngine::Common::ClientIdentity* SetDestination::release_clientidentity() {
  // @@protoc_insertion_point(field_release:GameEngine.Common.SetDestination.clientIdentity)
  
  ::GameEngine::Common::ClientIdentity* temp = clientidentity_;
  clientidentity_ = NULL;
  return temp;
}
void SetDestination::set_allocated_clientidentity(::GameEngine::Common::ClientIdentity* clientidentity) {
  delete clientidentity_;
  clientidentity_ = clientidentity;
  if (clientidentity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameEngine.Common.SetDestination.clientIdentity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace GameEngine

// @@protoc_insertion_point(global_scope)
